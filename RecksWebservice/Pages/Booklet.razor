@using System.Collections.Generic;
@using Microsoft.AspNetCore;
@using System.Diagnostics;
@using RecksWebservice.Data;
@using RecksWebservice.Types;
@using RecksWebservice.Pages;
@using System.Text.RegularExpressions;
@inject ClassDataHandler classDataHandler
@inject ClassScheduler classScheduler
@page "/booklet"
<link href="/css/booklet.css" rel="stylesheet" />

<PageTitle>LSU Booklet</PageTitle>

<style>
</style>

<body>
	<div class="container-fluid">
		<div class="row">
			<div id="header-text" class="col-md-12">
				<h1 class="text-center">
					LSU BOOKLET AND PERSONAL SCHEDULE
				</h1>
			</div>
		</div>
		<div id="booklet-info" class="row">
			<div id="semesters" class="col-md-6">
				<select name="semester" id="semester" @onchange="SelectSemester">
					<option disabled selected>Semester</option>
					@foreach (var semester in semesterList)
					{
						string semesterName = semester.ToString();
						<option value="@semesterName">@semesterName</option>
					}
				</select>
			</div>
			<div id="departments" class="col-md-6">
				<select name="department" id="department" @onchange="SelectDepartment">
					<option disabled selected>Department</option>
					@foreach (var department in departmentList)
					{
						string departmentName = department.ToString();
						<option value="@departmentName">@departmentName</option>
					}
				</select>
				
			</div>
		</div>
		<div class="row">
			<div id="class-data" class="col-md-6">
				<select name="classes" id="classes" @bind="@SelectedClass">
					<option disabled selected>Class</option>
					@for (int i = 1; i <= classList.Values.Count; i++)
					{
						if (classList.TryGetValue(i, out Class? visibleClass))
						{
							string days = "";
							foreach (var day in visibleClass.GetDays())
							{
								days += " " + day.ToString().Substring(0,3);
							}
                            string name = string.Format("[{0}] ", i) + string.Format("Filled Slots: {0}/{1} | {2} {3} Section {4} | {5} | Credits: {6} {7} {8} {9} {10}",
                            visibleClass.GetAvailableSlots(),
                            visibleClass.GetTotalEnrollCount(),
                            visibleClass.GetClassName(),
                            visibleClass.GetClassID(),
                            visibleClass.GetSection(),
                            days,
                            visibleClass.GetHoursAsString(),
                            visibleClass.GetCredits(),
                            visibleClass.GetRoomNumber(),
                            visibleClass.GetCourseBuilding(),
                            visibleClass.GetProfessor().GetName());
						
							<option value="@name">@name</option>
						}
					}
				</select>
			</div>

			<h5 style="font-style:italic;font-size:small;">@_selectedClass</h5>

			<h3>Personal Schedule</h3>
            <div align="center">
			    <button class="buttons" @onclick="AddClassToSchedule">Add Class</button>
                <button class="buttons" @onclick="classScheduler.RemoveSelectedClass">Remove Selected Class</button>
                <button class="buttons" @onclick="classScheduler.ResetCalendar">Reset Classes</button>
             </div>
            <ClassScheduler/>
            <RMPDataPage/>
		</div>
	</div>

</body>

@code {

    private List<string> semesterList = new();
    private List<string> departmentList = new();
    private Dictionary<int, Class> classList = new();
    private string _selectedSemester = "";
    private string _selectedDepartment = "";
    private string _selectedClass = "";
    private int _selectedID;

    [Parameter]
    public string SelectedClass
    {
        get => _selectedClass;
        set
        {
            if (_selectedClass == value) return;
            _selectedClass = value;
            string? index = _selectedClass.Substring(_selectedClass.IndexOf('[') + 1, _selectedClass.IndexOf(']') - 1);
            _selectedID = int.Parse(index);

            BindingValueChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<string> BindingValueChanged { get; set; }

    #region Select and Fill Methods
    /// <summary>
    /// Checking and Handling if Department has been selected.
    /// </summary>
    /// <param name="e"></param>
    private async void SelectSemester(ChangeEventArgs e)
    {
        object? selectorValue = e.Value!;
        string? value = selectorValue.ToString()!;
        _selectedSemester = value;
        if (!string.IsNullOrWhiteSpace(_selectedDepartment))
        {
            await FillClasses();
        }
    }
    /// <summary>
    /// Checking and Handling if Semester has been selected.
    /// </summary>
    /// <param name="e"></param>
    private async void SelectDepartment(ChangeEventArgs e)
    {
        object? selectorValue = e.Value!;
        string? value = selectorValue.ToString()!;
        _selectedDepartment = value;
        if (!string.IsNullOrWhiteSpace(_selectedSemester))
        {
            await FillClasses();
        }
    }

    private async Task FillClasses()
    {
        classList.Clear();
        await Task.Run(() => classDataHandler.GetClassData(_selectedSemester, _selectedDepartment));
        classList = classDataHandler.GetClasses();
        StateHasChanged();
    }
    #endregion

    public void AddClassToSchedule()
    {
        if (classList.TryGetValue(_selectedID, out Class? value))
        {
            classScheduler.ProcessClass(value);
            value.GetProfessor();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => classDataHandler.GetBookletData());

        semesterList = classDataHandler.GetSemesters();
        departmentList = classDataHandler.GetDepartments();
    }


    //After code block execution, semester & department lists should automatically fill themselves out accordingly.
} 
