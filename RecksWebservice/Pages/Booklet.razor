@using System.Collections.Generic;
@using Microsoft.AspNetCore;
@using System.Diagnostics;
@using RecksWebservice.Data;
@using RecksWebservice.Types;
@inject ClassDataHandler classDataHandler
@inject ClassScheduler classScheduler
@page "/booklet"
<link href="/css/booklet.css" rel="stylesheet" /> <!--Referencing CSS File For Booklet-->

<PageTitle>LSU Booklet</PageTitle>
<style>
</style>

<body>
	
	<div class="container-fluid">
		<div class="row">
			<div id="header-text" class="col-md-12">
				<h1 class="text-center">
					LSU BOOKLET AND CLASS SCHEDULER
				</h1>
			</div>
		</div>
		<div id="booklet-info" class="row">
			<div id="semesters" class="col-md-6">
				<select name="semester" id="semester" @onchange="SelectSemester">
					<option disabled selected>Semester</option>
					@foreach (var semester in semesterList)
					{
						string semesterName = semester.ToString(); //Prevents calling .ToString() more than once.
						<option value="@semesterName">@semesterName</option>
					}
				</select>
			</div>
			<div id="departments" class="col-md-6">
				<select name="department" id="department" @onchange="SelectDepartment">
					<option disabled selected>Department</option>
					@foreach (var department in departmentList)
					{
						string departmentName = department.ToString(); //Prevents calling .ToString() more than once.
						<option value="@departmentName">@departmentName</option>
					}
				</select>
				
			</div>
			<!--<div class="col-md-4">
			</div>-->
		</div>
		<div class="row">
			<div id="class-data" class="col-md-6">
				<select name="classes" id="classes" @bind="@SelectedClass">
					<option disabled selected>Class</option>
					@for (int i = 1; i <= classList.Values.Count; i++)
					{
						if (classList.TryGetValue(i, out Class? visibleClass))
						{
							string days = "";
							foreach (var day in visibleClass.GetDays())
							{
								days += " " + day.ToString().Substring(0,3);
							}
							string name = string.Format("[{0}] ", i) + string.Format("{0}/{9}| {1} {2} | {3} {4} | {5} {6} | {7} {8}",
							visibleClass.GetAvailableSlots(),
							visibleClass.GetClassName(),
							visibleClass.GetClassID(),
							days,
							visibleClass.GetHoursAsString(),
							visibleClass.GetCredits(),
							visibleClass.GetCourseBuilding(),
							visibleClass.GetRoomNumber(),
							visibleClass.GetProfessor().GetName(),
							visibleClass.GetTotalEnrollCount());

							<option value="@name">@name</option>
						}
					}
				</select>
			</div>

			<h5 style="font-style:italic;font-size:small;">@_selectedClass</h5>

			<h3>Class Scheduler</h3>

			<button class="buttons" @onclick="AddClassToSchedule">Add Class</button>
			<br />
			<button class="buttons">Remove Class</button>
			<br />
			<button class="buttons">Edit Class</button>
			<br />
			<button class="buttons">Reset Schedule</button>

			<ClassScheduler>
			</ClassScheduler>

		</div>
	</div>

</body>

@code {

	private List<string> semesterList = new();
	private List<string> departmentList = new();
	private Dictionary<int, Class> classList = new();
	private List<Class> userPickedClasses = new();
	private string _selectedSemester = "";
	private string _selectedDepartment = "";
	private string _selectedClass = "";
	private int _selectedID;

	[Parameter]
	public string SelectedClass
	{
		get => _selectedClass;
		set
		{
			if (_selectedClass == value) return;
			_selectedClass = value;
			_selectedID = int.Parse(_selectedClass[1].ToString());
			BindingValueChanged.InvokeAsync(value);
		}
	}
	[Parameter]
	public EventCallback<string> BindingValueChanged { get; set; }

	#region Select and Fill Methods
	/// <summary>
	/// Checking and Handling if Department has been selected.
	/// </summary>
	/// <param name="e"></param>
	private async void SelectSemester(ChangeEventArgs e)
	{
		object? selectorValue = e.Value!;
		string? value = selectorValue.ToString()!;
		_selectedSemester = value;
		if (!string.IsNullOrWhiteSpace(_selectedDepartment))
		{
			await FillClasses();
		}
	}
	/// <summary>
	/// Checking and Handling if Semester has been selected.
	/// </summary>
	/// <param name="e"></param>
	private async void SelectDepartment(ChangeEventArgs e)
	{
		object? selectorValue = e.Value!;
		string? value = selectorValue.ToString()!;
		_selectedDepartment = value;
		if (!string.IsNullOrWhiteSpace(_selectedSemester))
		{
			await FillClasses();
		}
	}

	private async Task FillClasses()
	{
		classList.Clear();
		await Task.Run(() => classDataHandler.GetClassData(_selectedSemester, _selectedDepartment));
		classList = classDataHandler.GetClasses();
		StateHasChanged();
	}
	#endregion

	public void AddClassToSchedule() ///Need to get class that the user has selected from the list
	{
		if (classList.TryGetValue(_selectedID, out Class? value))
		{
			classScheduler.ProcessClass(value);
		}
	}
	public void RemoveClassFromSchedule() ///Need to get from a list of classes that the user already has
	{
		
	}

	protected override async Task OnInitializedAsync()
	{
		await Task.Run(() => classDataHandler.GetBookletData());
		
		semesterList = classDataHandler.GetSemesters();
		departmentList = classDataHandler.GetDepartments();
	}

	//After code block execution, semester & department lists should automatically fill themselves out accordingly.
} 
