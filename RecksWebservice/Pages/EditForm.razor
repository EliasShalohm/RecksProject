@inject RecksWebservice.Pages.Services.Service IService
@using RecksWebservice.Data
@using RecksWebservice.Pages
@using RecksWebservice.Pages.Services

<h3>Edit Class</h3>

@if (ShowForm)
    { 
        <div class="simple-form">
            <div class="form-group">
                <label for="course-Id">Course ID</label>
                <input @bind="courseId" type="text" class="form-control" id="course-id" placeholder="Enter Course ID"/>
            </div>

            <div class="form-group">
                <label for="course-number">Course Number</label>
                <input @bind="courseNumber" type ="text" class="form-control" id="course-number" placeholder="Enter Course Number"/>
            </div>

            <button @onclick="SubmitForm" class="btn btn-primary">Edit Class</button>
            <button @onclick="Cancel" class="btn btn-secondary">Cancel</button>
        </div>
    }
else
{
    <div class="alert alert-success" role="alert">
        @courseId @courseNumber has been added to the schedule
        <button class="btn btn-primary" @onclick="Done">Done</button>
    </div>
}

@code {
    [CascadingParameter] ModalParameter Parameters { get; set; }
    BlazoredModal Modal;

    bool ShowForm { get; set; } = true;
    string courseId { get; set; } = "";
    string courseNumber { get; set; } = "";
    int courseHours { get; set; }
    int FormId { get; set; }

    protected override void OnInitialized()
    {
        FormId = Parameters.Get<int>("FormId");
    }

    void SubmitForm()
    {
        ShowForm = false;
    }

    void Done()
    {
        IService.Close(ModalResult.Ok("Form Submitted"));
    }

    void Cancel()
    {
        IService.Close(ModalResult.Cancel());
    }

}
