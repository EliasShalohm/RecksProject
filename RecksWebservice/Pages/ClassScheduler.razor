@page "/ClassData"
@using System
@using Microsoft.AspNetCore
@using RecksWebservice.Data
@using System.Diagnostics;
@using RecksWebservice.Types;
@using System.Collections.Generic
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Data
@using static RecksWebservice.Types.ScheduleFiller;
<style>
	h3 {
		font-family: Cambria;
		font-weight: bold;
		text-align: center;
		color: #461D7C;
	}

	.buttons {
		background-color: #461D7C;
		color: white;
		border: none;
		font-family: Cambria;
	}

	.e-grid .e-rowcell.color_orange {
		color: orangered;
	}
	.e-grid .e-rowcell.color_red {
		color: red;
	}
	.e-grid .e-rowcell.color_blue {
		color: blue;
	}
	.e-grid .e-rowcell.color_green {
		color: green;
	}
	.e-grid .e-rowcell.color_purple {
		color: purple;
	}
	.e-grid .e-rowcell.color_gold {
		color: gold;
	}
</style>


<h3>Class Scheduler</h3>

<button class="buttons">Add Class</button>
<br/>
<button class="buttons">Remove Class</button>
<br/>
<button class="buttons">Edit Class</button>

<div align="right" class="col-lg-12 control-section">
	<SfGrid @ref="@myGrid" DataSource="@ScheduleDataGridData" onselect="">
		<GridColumns>
			<GridColumn Field="@nameof(OrganizedCalendar.Time)" HeaderText="Time"
						TextAlign="TextAlign.Left" Width="25" IsPrimaryKey="true">
			</GridColumn>
			<GridColumn Field="@nameof(OrganizedCalendar.Monday)" HeaderText="Monday"
						TextAlign="TextAlign.Center" Width="50">
			</GridColumn>
			<GridColumn Field="@nameof(OrganizedCalendar.Tuesday)" HeaderText="Tuesday"
						TextAlign="TextAlign.Center" Width="50">
			</GridColumn>
			<GridColumn Field="@nameof(OrganizedCalendar.Wednesday)" HeaderText="Wednesday"
						TextAlign="TextAlign.Center" Width="50">
			</GridColumn>
			<GridColumn Field="@nameof(OrganizedCalendar.Thursday)" HeaderText="Thursday"
						TextAlign="TextAlign.Center" Width="50">
			</GridColumn>
			<GridColumn Field="@nameof(OrganizedCalendar.Friday)" HeaderText="Friday"
						TextAlign="TextAlign.Center" Width="50">
			</GridColumn>
		</GridColumns>
		<GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"
			Mode="EditMode.Batch"></GridEditSettings>
	</SfGrid>


	<button class="btn btn-primary" @onclick="UpdateCell">ByUpdateCell</button>
	<button class="btn btn-primary" @onclick="SetCellValue">BySetCellValue</button>
	<button class="btn btn-primary" @onclick="DataSourceSetValue">ByDataSource</button>
	<button class="btn btn-primary" @onclick="CurrentViewDataSetValue">ByCurrentViewData</button>
	<button class="btn btn-primary" @onclick="GetValueCell">GetValueCell</button>
	<button class="btn btn-primary" @onclick="BatchSaveMethod">Batch Save</button>

</div>

<br/>

@code {
	public SfGrid<OrganizedCalendar> myGrid { get; set; }
	public List<OrganizedCalendar> ScheduleDataGridData = new ScheduleFiller().GetCalendar();
	public string cellValue { get; set; }

	private void BatchSaveMethod()
	{
		myGrid.EndEditAsync();
	}
	private void UpdateCell()
	{
		myGrid.UpdateCellAsync(0, "MondayTime", "UpdateCell!");
	}

	private void SetCellValue() //Doesn't do anything
	{
		myGrid.SetCellValueAsync("Astronomy", "MondayTime", "SetCellValue!");
		myGrid.Refresh();
	}

	private void DataSourceSetValue()
	{
		ScheduleDataGridData.Where(x => x.Monday == "Astronomy").First().Monday = "DataSourceSetValue!";
		myGrid.Refresh();
	}
	private void CurrentViewDataSetValue()
	{
		((OrganizedCalendar)myGrid.CurrentViewData.Where(x => ((OrganizedCalendar)x).Monday == "Astronomy").First()).Monday = "DataSourceSetValue!"; ;
		myGrid.Refresh();
	}

	private void GetValueCell()
	{
		cellValue = ((OrganizedCalendar)myGrid.CurrentViewData.Where(x => ((OrganizedCalendar)x).Monday == "7:00 AM").First()).Monday;
	}

	private List<Class> classes { get; set; }
	protected override void OnInitialized()
	{
		base.OnInitialized();
	}
	
	public List<Class> CompareClasses()
	{
		List<Class> conflictingClasses = new List<Class>();
		//for (int i = 0; i < classes.Count - 1; i++)
		//{
		//	for (int j = i + 1; j < classes.Count; j++)
		//	{
		//		if (classes[i].StartTime < classes[j].EndTime && classes[j].StartTime < classes[i].EndTime)
		//		{
		//			conflictingClasses.Add(classes[i]);
		//			conflictingClasses.Add(classes[j]);
		//		}
		//	}
		//}
		return conflictingClasses;
	}
	

	//public void SubmitClasses(Class classObj)
	//{
	//	classes.Add(classObj);
	//		{
	//			Id = int.Parse(classObj.GetClassID()),
	//			Subject = classObj.GetClassName(),
	//			//StartTime = classObj.GetStartTime(), //StartTime has Mistranslation when read in code
	//			//EndTime = classObj.EndTime, //EndTime has Mistranslation when read in code
	//			CategoryColor = classObj.GetColor(),
	//		};
	//	//test.Add(appointment);
	//}
	//public void OnEventRendered(EventRenderedArgs<OrganizedCalendar> args)
	//{
	//	Dictionary<string, object> attributes = new Dictionary<string, object>();
	//	if (CurrentView == View.Agenda)
	//	{
	//		attributes.Add("style", "border-left-color: " + args.Data.CategoryColor);
	//	}
	//	else
	//	{
	//		attributes.Add("style", "background: " + args.Data.CategoryColor);
	//	}
	//	args.Attributes = attributes;
	//}

	
}
