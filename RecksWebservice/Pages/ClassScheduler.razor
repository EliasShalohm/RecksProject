@page "/ClassData"
@using System
@using Microsoft.AspNetCore
@using RecksWebservice.Data
@using System.Diagnostics;
@using RecksWebservice.Types;
@using System.Collections.Generic
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Data
@using Data


<style>
	h3 {
		font-family: Cambria;
		font-weight: bold;
		text-align: center;
		color: #461D7C;
	}

	.buttons {
		background-color: #461D7C;
		color: white;
		border: none;
		font-family: Cambria;
	}
</style>

<h3>Class Scheduler</h3>

<div align="center">
    <button class="buttons">Add Class</button>
    <button class="buttons">Remove Class</button>
</div>

    <div align="center" class="col-lg-12 control-section">
        <SfSchedule TValue="AppointmentData" Width="85%" @bind-SelectedDate="@CurrentDate" @bind-CurrentView="@CurrentView" StartHour="6:00" EndHour="19:00">
            <ScheduleEvents TValue="AppointmentData" EventRendered="OnEventRendered"></ScheduleEvents>
            <ScheduleViews>
                <ScheduleView Option="View.Day"></ScheduleView>
                <ScheduleView Option="View.Week"></ScheduleView>
                <ScheduleView Option="View.WorkWeek"></ScheduleView>
                <ScheduleView Option="View.Month"></ScheduleView>
                <ScheduleView Option="View.Agenda"></ScheduleView>
            </ScheduleViews>
            <ScheduleEventSettings DataSource="@DataSource"></ScheduleEventSettings>
        </SfSchedule>
        <br />
    </div>
    <br />

    @code {
            public View CurrentView { get; set; } = View.Week;
            private DateTime CurrentDate { get; set; }
            private List<AppointmentData> DataSource = new List<AppointmentData>();
            private List<Class> classes = new List<Class>();
            protected override void OnInitialized()
            {
                base.OnInitialized();
                CurrentDate = DateTime.Today;
            }

            public void SetClasses(List<Class> classList)
            {
                classes = classList;
                DataSource = new List<AppointmentData>()

        ///Values below currently do NOT appear on schedule visualizer
        {
            new AppointmentData { Id = 1, Subject = "Testing", StartTime = new DateTime(
                    DateTime.Now.Year,
                    DateTime.Now.Month, 22, 9, 30, 0),
                EndTime = new DateTime(
                    DateTime.Now.Year,
                    DateTime.Now.Month, 22, 10, 30, 0)},
            new AppointmentData { Id = 2, Subject = "Conference", StartTime = new DateTime(
                    DateTime.Now.Year,
                    DateTime.Now.Month, 24, 10, 30, 0),
                EndTime = new DateTime(
                    DateTime.Now.Year,
                    DateTime.Now.Month, 24, 12, 0, 0)},
        };

                ///Commented for testing values elsewhere.
                //foreach (Class classObj in classes)
                //{
                //	AppointmentData appointment = new AppointmentData()
                //		{
                //			Id = classObj.GetClassID(),
                //			Subject = classObj.GetClassName(),
                //			StartTime = classObj.GetStartTimes()[0], ///Reading 0'th index, which may need fixing
                //			EndTime = classObj.GetEndTimes()[0], ///Reading 0'th index, which may need fixing
                //			CategoryColor = classObj.GetColor(),
                //		};
                //	DataSource.Add(appointment);
                //}

            }
            public List<Class> CompareClasses()
            {
                List<Class> conflictingClasses = new List<Class>();
                //for (int i = 0; i < classes.Count - 1; i++)
                //{
                //	for (int j = i + 1; j < classes.Count; j++)
                //	{
                //		if (classes[i].StartTime < classes[j].EndTime && classes[j].StartTime < classes[i].EndTime)
                //		{
                //			conflictingClasses.Add(classes[i]);
                //			conflictingClasses.Add(classes[j]);
                //		}
                //	}
                //}
                return conflictingClasses;
            }
            public void ReportConflictingClasses(List<Class> conflictingClasses)
            {
                foreach (Class classObj in conflictingClasses)
                {
                    Debug.WriteLine("Conflicting class: " + classObj.GetClassName());
                }
            }

            public void SubmitClasses(Class classObj)
            {
                classes.Add(classObj);
                AppointmentData appointment = new AppointmentData()
                {
                    Id = int.Parse(classObj.GetClassID()),
                    Subject = classObj.GetClassName(),
                    //StartTime = classObj.GetStartTime(), //StartTime has Mistranslation when read in code
                    //EndTime = classObj.EndTime, //EndTime has Mistranslation when read in code
                    CategoryColor = classObj.GetColor(),
                };
                DataSource.Add(appointment);
            }
            public void OnEventRendered(EventRenderedArgs<AppointmentData> args)
            {
                Dictionary<string, object> attributes = new Dictionary<string, object>();
                if (CurrentView == View.Agenda)
                {
                    attributes.Add("style", "border-left-color: " + args.Data.CategoryColor);
                }
                else
                {
                    attributes.Add("style", "background: " + args.Data.CategoryColor);
                }
                args.Attributes = attributes;

                List<AppointmentData> AD = new List<AppointmentData> {
                new AppointmentData{Id = 1, Subject = "Class", StartTime = new DateTime(DateTime.Now.Year, DateTime.Now.Month,26,10, 0, 0),
                EndTime = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 26, 12, 0, 0)}
            };
        }

        }

