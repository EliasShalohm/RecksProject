@page "/ClassData"
@using System
@using Microsoft.AspNetCore
@using RecksWebservice.Data
@using System.Diagnostics;
@using RecksWebservice.Types;
@using System.Collections.Generic
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Data
@using Data
<style>
    h3 {
        font-family: Cambria;
        font-weight: bold;
        text-align: center;
        color: #461D7C;
    }
    .buttons{
        background-color: #461D7C;
        color: white;
        border: none;
        font-family: Cambria;
    }
</style>

<h3>Class Scheduler</h3>

<button class="buttons">Add Class</button> <br />
<button class="buttons">Remove Class</button><br />
<button class="buttons">Edit Class</button>
<div align ="right" class="col-lg-12 control-section">
    <SfSchedule TValue="AppointmentData" Width="80%" Height="1000px" @bind-SelectedDate="@CurrentDate" @bind-CurrentView="@CurrentView" StartHour="6:00" EndHour="24:00">
        <ScheduleEvents TValue="AppointmentData" EventRendered="OnEventRendered"></ScheduleEvents>
        <ScheduleEventSettings DataSource="@dataSource"></ScheduleEventSettings>
        <ScheduleViews>
            <ScheduleView Option="View.Day"></ScheduleView>
            <ScheduleView Option="View.Week"></ScheduleView>
            <ScheduleView Option="View.WorkWeek"></ScheduleView>
            <ScheduleView Option="View.Month"></ScheduleView>
            <ScheduleView Option="View.Agenda"></ScheduleView>
        </ScheduleViews>
    </SfSchedule>
</div>

@code {
    public View CurrentView { get; set; } = View.Week;
    private DateTime CurrentDate { get; set; }
    private List<AppointmentData> dataSource = new List<AppointmentData>();
    private List<Class> classes = new List<Class>();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        CurrentDate = DateTime.Today;
    }

    public void SetClasses(List<Class> classList)
    {
        classes = classList;
        dataSource = new List<AppointmentData>();
        foreach (Class classObj in classes)
        {
            AppointmentData appointment = new AppointmentData()
                {
                    Id = classObj.Id,
                    Subject = classObj.CourseName,
                    StartTime = classObj.StartTime,
                    EndTime = classObj.EndTime,
                    CategoryColor = classObj.Color,
                };
            dataSource.Add(appointment);
        }
    }
    public List<Class> CompareClasses()
    {
        List<Class> conflictingClasses = new List<Class>();
        for (int i = 0; i < classes.Count - 1; i++)
        {
            for (int j = i + 1; j < classes.Count; j++)
            {
                if (classes[i].StartTime < classes[j].EndTime && classes[j].StartTime < classes[i].EndTime)
                {
                    conflictingClasses.Add(classes[i]);
                    conflictingClasses.Add(classes[j]);
                }
            }
        }
        return conflictingClasses;
    }
    public void ReportConflictingClasses(List<Class> conflictingClasses)
    {
        foreach (Class classObj in conflictingClasses)
        {
            Debug.WriteLine("Conflicting class: " + classObj.CourseName);
        }
    }

    public void SubmitClasses(Class classObj)
    {
        classes.Add(classObj);
        AppointmentData appointment = new AppointmentData()
            {
                Id = classObj.Id,
                Subject = classObj.CourseName,
                StartTime = classObj.StartTime,
                EndTime = classObj.EndTime,
                CategoryColor = classObj.Color,
            };
        dataSource.Add(appointment);
    }
    public void OnEventRendered(EventRenderedArgs<AppointmentData> args)
    {
        Dictionary<string, object> attributes = new Dictionary<string, object>();
        if (CurrentView == View.Agenda)
        {
            attributes.Add("style", "border-left-color: " + args.Data.CategoryColor);
        }
        else
        {
            attributes.Add("style", "background: " + args.Data.CategoryColor);
        }
        args.Attributes = attributes;
    }


    public class AppointmentData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public string Location { get; set; }
        public string Description { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public Nullable<bool> IsAllDay { get; set; }
        public string CategoryColor { get; set; }
        public string RecurrenceRule { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
        public string RecurrenceException { get; set; }
        public string StartTimezone { get; set; }
        public string EndTimezone { get; set; }
    }
  public class Class
{
    public int Id { get; set; }
    public string CourseName { get; set; }
    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }
    public string Color { get; set; }

    public Class(int id, string courseName, DateTime startTime, DateTime endTime, string color)
    {
        Id = id;
        CourseName = courseName;
        StartTime = startTime;
        EndTime = endTime;
        Color = color;
    }
}
}
   