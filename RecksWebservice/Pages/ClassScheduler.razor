@page "/classScheduler"
@using System
@using Microsoft.AspNetCore
@using RecksWebservice.Data
@using System.Diagnostics;
@using RecksWebservice.Types;
@using System.Collections.Generic
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Data
@using System.Dynamic;
@using System.Reflection;
@using static RecksWebservice.Types.ScheduleFiller;

<select name="selected-class-item" id="selected-class" style="width: 250px; text-align:center;">
	<option disabled selected>Selected Class</option>
	@*@foreach (var part in selectedClasses)
	{
	<option value="part"></option>
	}*@
</select>

<div align="right" class="col-lg-12 control-section">
	<SfGrid @ref="@myGrid" DataSource="@ScheduleDataGridData" onselect="">
		<GridEvents TValue="OrganizedCalendar"></GridEvents>
		<GridColumns>
			<GridColumn Field="@nameof(OrganizedCalendar.Time)" HeaderText="Time"
						TextAlign="TextAlign.Left" Width="25" IsPrimaryKey="true">
			</GridColumn>
			<GridColumn Field="@nameof(OrganizedCalendar.Monday)" HeaderText="Monday"
						TextAlign="TextAlign.Center" Width="50">
			</GridColumn>
			<GridColumn Field="@nameof(OrganizedCalendar.Tuesday)" HeaderText="Tuesday"
						TextAlign="TextAlign.Center" Width="50">
			</GridColumn>
			<GridColumn Field="@nameof(OrganizedCalendar.Wednesday)" HeaderText="Wednesday"
						TextAlign="TextAlign.Center" Width="50">
			</GridColumn>
			<GridColumn Field="@nameof(OrganizedCalendar.Thursday)" HeaderText="Thursday"
						TextAlign="TextAlign.Center" Width="50">
			</GridColumn>
			<GridColumn Field="@nameof(OrganizedCalendar.Friday)" HeaderText="Friday"
						TextAlign="TextAlign.Center" Width="50">
			</GridColumn>
		</GridColumns>
		<GridEditSettings AllowAdding="true" AllowEditing="false" AllowDeleting="true"
						  Mode="EditMode.Batch" ShowConfirmDialog="false"></GridEditSettings>
	</SfGrid>
	<br/>

</div>

<br/>

@code {
	private List<Class>? selectedClasses { get; set; } = new();
	private static ScheduleFiller scheduleFiller { get; set;} = new();
	public List<OrganizedCalendar> ScheduleDataGridData = scheduleFiller.GetCalendar();
	public SfGrid<OrganizedCalendar> myGrid { get; set; }
	public string cellValue { get; set; }

	public void ProcessClass(Class entry)
	{
		///Check to see if the given class conflicts with any in selectedClasses list
		if (CompareClasses(entry))
		{
			selectedClasses.Add(entry);
			ProcessClassTimes(entry);
		}
		else
		{
			///Spit out error message for the user.
		}
		myGrid.Refresh();
	}

	public void ResetCalendar()
	{
		selectedClasses.Clear();
		scheduleFiller.ResetCalendar();
		List<Day> days = new List<Day> { Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday, Day.Saturday, Day.Sunday };
		foreach (var day in days)
		{
			int startIndex = 0;
			int endIndex = scheduleFiller.GetCalendar().Count;

			///Compare Class time and round; maybe insert new time if invalid?

			var calendarSlots = scheduleFiller.GetCalendar().Skip(startIndex).Take(endIndex - startIndex + 1);

			for (int i = 0; i < endIndex; i++)
			{
				myGrid.UpdateCellAsync(i, day.ToString(), "");
				myGrid.EndEditAsync();
			}
		}
	}

	private Class TestPremadeClass() {
		var entry = new Class();
		entry.SetDays(new List<Day> { Day.Monday, Day.Wednesday, Day.Friday });
		entry.SetStartHours("130");
		entry.SetEndHours("220");
		entry.SetClassName("TestCourse");
		entry.SetClassNumber("1001");
		return entry;
	}


	public void ProcessClassTimes(Class entry)
	{
		//entry = TestPremadeClass();

		var calendar = scheduleFiller.GetCalendar();
		Time[] startTimes = entry.GetStartTimes().ToArray();
		Time[] endTimes = entry.GetEndTimes().ToArray();

		string combinedStartTime = string.Format("{0}:{1} {2}", startTimes[0].hour, startTimes[0].minutes, startTimes[0].meridium);
		string combinedEndTime = string.Format("{0}:{1} {2}", endTimes[0].hour, endTimes[0].minutes, endTimes[0].meridium);
		if (calendar.IndexOf(calendar.Find(x => x.Time == combinedEndTime)) == -1)
		{
			string endTime_RoundedDown = "";
			string endTime_RoundedUp = "";
			if (endTimes[0].minutes.Equals("20"))
			{
				endTime_RoundedDown = string.Format("{0}:{1} {2}", endTimes[0].hour, "00", endTimes[0].meridium); //endTime_RoundedUp = string.Format("{0}:{1} {2}", endTimes[0].hour, "30", endTimes[0].meridium);

				var indexOfTime = calendar.IndexOf(calendar.Find(x => x.Time == endTime_RoundedDown)) + 1;
				calendar.Insert(indexOfTime, new OrganizedCalendar() { Time = combinedEndTime });
			}
			else if (endTimes[0].minutes.Equals("50"))
			{
				endTime_RoundedDown = string.Format("{0}:{1} {2}", endTimes[0].hour, "30", endTimes[0].meridium); //endTime_RoundedUp = string.Format("{0}:{1} {2}", endTimes[0].hour + 1, "00", endTimes[0].meridium);

				var indexOfTime = calendar.IndexOf(calendar.Find(x => x.Time == endTime_RoundedDown)) + 1;
				calendar.Insert(indexOfTime, new OrganizedCalendar() { Time = combinedEndTime });
			}

			ScheduleDataGridData = calendar;
		}
		myGrid.EndEditAsync();
		StateHasChanged();

		myGrid.StartEditAsync();
		for (int i = 0; i < startTimes.Length; i++)
		{
			var dayNumber = startTimes[i].day;
			Console.WriteLine("StartTime: " + combinedStartTime + " EndTime: " + combinedEndTime);
			foreach (var day in entry.GetDays())
			{

				//int startIndex = calendar.IndexOf(calendar.Find(x => x.Time == combinedStartTime));
				int startIndex = ScheduleDataGridData.FindIndex(x => x.Time == combinedStartTime);
				//int endIndex = calendar.IndexOf(calendar.Find(x => x.Time == combinedEndTime));
				int endIndex = ScheduleDataGridData.FindIndex(x => x.Time == combinedEndTime);


				for (int j = startIndex; j <= endIndex; j++)
				{
					var value = string.Format("{0}{1} Section {2}", entry.GetClassName(), entry.GetClassID(), entry.GetSection());

					PropertyInfo info = ScheduleDataGridData[j].GetType().GetProperty(day.ToString());
					info.SetValue(ScheduleDataGridData[j], value);
				}
			}
		}
		
		myGrid.EndEditAsync();
		StateHasChanged();
		return;
	}

	protected override void OnInitialized()
	{
		//base.OnInitialized();
		selectedClasses = new List<Class>();
	}

	public bool CompareClasses(Class value)
	{
		List<Class> conflictingClasses = new List<Class>(); //report these to error handler for a file-writeup
															//True = Good / All Classes Are Set
															// False = Bad / A Class Conflicts
		if (selectedClasses != null) 
		{
			foreach (var key in selectedClasses)
			{
				//comparisons here; if comparisons 
			}
			//for (int i = 0; i < classes.Count - 1; i++)
			//{
			//	for (int j = i + 1; j < classes.Count; j++)
			//	{
			//		if (classes[i].StartTime < classes[j].EndTime && classes[j].StartTime < classes[i].EndTime)
			//		{
			//			conflictingClasses.Add(classes[i]);
			//			conflictingClasses.Add(classes[j]);
			//		}
			//	}
			//}
		} else
		{
			return true;
		}
		return true;
	}
	

	//public void SubmitClasses(Class classObj)
	//{
	//	classes.Add(classObj);
	//		{
	//			Id = int.Parse(classObj.GetClassID()),
	//			Subject = classObj.GetClassName(),
	//			//StartTime = classObj.GetStartTime(), //StartTime has Mistranslation when read in code
	//			//EndTime = classObj.EndTime, //EndTime has Mistranslation when read in code
	//			CategoryColor = classObj.GetColor(),
	//		};
	//	//test.Add(appointment);
	//}
	//public void OnEventRendered(EventRenderedArgs<OrganizedCalendar> args)
	//{
	//	Dictionary<string, object> attributes = new Dictionary<string, object>();
	//	if (CurrentView == View.Agenda)
	//	{
	//		attributes.Add("style", "border-left-color: " + args.Data.CategoryColor);
	//	}
	//	else
	//	{
	//		attributes.Add("style", "background: " + args.Data.CategoryColor);
	//	}
	//	args.Attributes = attributes;
	//}

	
}
