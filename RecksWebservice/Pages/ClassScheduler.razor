@page "/classScheduler"
@using System
@using Microsoft.AspNetCore
@using RecksWebservice.Data
@using System.Diagnostics;
@using RecksWebservice.Types;
@using System.Collections.Generic
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Data
@using System.Dynamic;
@using static RecksWebservice.Types.ScheduleFiller;


<div align="right" class="col-lg-12 control-section">
	<SfGrid @ref="@myGrid" DataSource="@ScheduleDataGridData" onselect="">
		<GridEvents TValue="OrganizedCalendar"></GridEvents>
		<GridColumns>
			<GridColumn Field="@nameof(OrganizedCalendar.Time)" HeaderText="Time"
						TextAlign="TextAlign.Left" Width="25" IsPrimaryKey="true">
			</GridColumn>
			<GridColumn Field="@nameof(OrganizedCalendar.Monday)" HeaderText="Monday"
						TextAlign="TextAlign.Center" Width="50">
			</GridColumn>
			<GridColumn Field="@nameof(OrganizedCalendar.Tuesday)" HeaderText="Tuesday"
						TextAlign="TextAlign.Center" Width="50">
			</GridColumn>
			<GridColumn Field="@nameof(OrganizedCalendar.Wednesday)" HeaderText="Wednesday"
						TextAlign="TextAlign.Center" Width="50">
			</GridColumn>
			<GridColumn Field="@nameof(OrganizedCalendar.Thursday)" HeaderText="Thursday"
						TextAlign="TextAlign.Center" Width="50">
			</GridColumn>
			<GridColumn Field="@nameof(OrganizedCalendar.Friday)" HeaderText="Friday"
						TextAlign="TextAlign.Center" Width="50">
			</GridColumn>
		</GridColumns>
		<GridEditSettings AllowAdding="true" AllowEditing="false" AllowDeleting="true"
			Mode="EditMode.Batch"></GridEditSettings>
	</SfGrid>
	<br/>

	@*These buttons are commented out so that during demonstration, they aren't around. However, their functions still
		provide execellent use.
	*@

	<button class="btn btn-primary" @onclick="DataSourceSetValue">ByDataSource</button>
	<button class="btn btn-primary" @onclick="CurrentViewDataSetValue">ByCurrentViewData</button>
	<button class="btn btn-primary" @onclick="GetValueCell">GetValueCell</button>
</div>

<br/>

@code {
	private List<Class> selectedClasses { get; set; } = new();
	private static ScheduleFiller scheduleFiller { get; set; } = new();
	public List<OrganizedCalendar> ScheduleDataGridData = scheduleFiller.GetCalendar();
	public SfGrid<OrganizedCalendar> myGrid { get; set; }
	public string cellValue { get; set; }

	public void ProcessClass(Class entry)
	{
		selectedClasses ??= new List<Class>();
		///Check to see if the given class conflicts with any in selectedClasses list
		if (CompareClasses(entry)) {
			selectedClasses.Add(entry);
			ProcessClassTimes(entry);
		} else
		{
			///Spit out error message for the user.
			Console.WriteLine($"Error: The class {@class.GetClassName} conflicts with the following selected classes:");
			foreach (var selectedClass in selectedClasses)
			{
				Console.WriteLine($"- {selectedClass.GetClassName}");
			}
		}
		myGrid.Refresh();
	}

	public void ResetCalendar()
	{
		selectedClasses.Clear();
		scheduleFiller.ResetCalendar();
		List<Day> days = new List<Day> { Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday, Day.Saturday, Day.Sunday };
		foreach (var day in days) {
			int startIndex = 0;
			int endIndex = scheduleFiller.GetCalendar().Count;

			///Compare Class time and round; maybe insert new time if invalid?

			var calendarSlots = scheduleFiller.GetCalendar().Skip(startIndex).Take(endIndex - startIndex + 1);

			for (int i = 0; i < endIndex; i++)
			{
				myGrid.UpdateCellAsync(i, day.ToString(), "");
				myGrid.EndEditAsync();
			}
		}
	}

	public void ProcessClassTimes(Class entry)
	{

		////Test Data for easy-access.
		//entry = new Class();
		//entry.SetDays(new List<Day> { Day.Monday, Day.Tuesday });
		//entry.SetStartHours("300");
		//entry.SetEndHours("600");
		//entry.SetClassName("TestCourse");
		//entry.SetClassNumber("1001");

		var calendar = scheduleFiller.GetCalendar();
		Time[] startTimes = entry.GetStartTimes().ToArray();
		Time[] endTimes = entry.GetEndTimes().ToArray();
		for (int i = 0; i < startTimes.Length; i++)
		{
			var dayNumber = startTimes[i].day;
			string combinedStartTime = string.Format("{0}:{1} {2}", startTimes[i].hour, startTimes[i].minutes, startTimes[i].meridium);
			string combinedEndTime = string.Format("{0}:{1} {2}", endTimes[i].hour, endTimes[i].minutes, endTimes[i].meridium);

			foreach (var day in entry.GetDays())
			{
				int startIndex = calendar.IndexOf(calendar.Find(x => x.Time == combinedStartTime));
				int endIndex = calendar.IndexOf(calendar.Find(x => x.Time == combinedEndTime));

				///Compare Class time and round; maybe insert new time if invalid?
				
				for (int j = startIndex; j < endIndex + 1; j++)
				{
					myGrid.UpdateCellAsync(j, day.ToString(), (entry.GetClassName() + entry.GetClassID()));
				}

			}
		}
		myGrid.EndEditAsync();
		return;
	}

	#region Spare "Guide" Methods
	private void DataSourceSetValue()
	{
		ScheduleDataGridData.Where(x => x.Monday == "Astronomy").First().Monday = "DataSourceSetValue!";
		myGrid.Refresh();
	}
	private void CurrentViewDataSetValue()
	{
		((OrganizedCalendar)myGrid.CurrentViewData.Where(x => ((OrganizedCalendar)x).Monday == "Astronomy").First()).Monday = "DataSourceSetValue!"; ;
		myGrid.Refresh();
	}

	private void GetValueCell()
	{
		cellValue = ((OrganizedCalendar)myGrid.CurrentViewData.Where(x => ((OrganizedCalendar)x).Monday == "Astronomy").First()).Monday;
	}
	#endregion

	private List<Class> classes { get; set; }
	protected override void OnInitialized()
	{
		base.OnInitialized();
		selectedClasses = new List<Class>();
	}

	public bool CompareClasses(Class entry)
	{
		List<Class> conflictingClasses = new List<Class>(); //report these to error handler for a file-writeup
															//True = Good / All Classes Are Set
															// False = Bad / A Class Conflicts
		if (selectedClasses != null) 
		{
			foreach (var key in selectedClasses) ///<---- POINT OF CRASH (selectedClasses is null)
			{
				//comparisons here; if comparisons 
			}
			//for (int i = 0; i < classes.Count - 1; i++)
			//{
			//	for (int j = i + 1; j < classes.Count; j++)
			//	{
			//		if (classes[i].StartTime < classes[j].EndTime && classes[j].StartTime < classes[i].EndTime)
			//		{
			//			conflictingClasses.Add(classes[i]);
			//			conflictingClasses.Add(classes[j]);
			//		}
			//	}
			//}
		} else
		{
			return true;
		}
		return true;
	}
	

	//public void SubmitClasses(Class classObj)
	//{
	//	classes.Add(classObj);
	//		{
	//			Id = int.Parse(classObj.GetClassID()),
	//			Subject = classObj.GetClassName(),
	//			//StartTime = classObj.GetStartTime(), //StartTime has Mistranslation when read in code
	//			//EndTime = classObj.EndTime, //EndTime has Mistranslation when read in code
	//			CategoryColor = classObj.GetColor(),
	//		};
	//	//test.Add(appointment);
	//}
	//public void OnEventRendered(EventRenderedArgs<OrganizedCalendar> args)
	//{
	//	Dictionary<string, object> attributes = new Dictionary<string, object>();
	//	if (CurrentView == View.Agenda)
	//	{
	//		attributes.Add("style", "border-left-color: " + args.Data.CategoryColor);
	//	}
	//	else
	//	{
	//		attributes.Add("style", "background: " + args.Data.CategoryColor);
	//	}
	//	args.Attributes = attributes;
	//}

	
}
